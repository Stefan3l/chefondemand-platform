generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Chef {
  id           String   @id @default(cuid())
  firstName    String   @db.VarChar(60)
  lastName     String   @db.VarChar(60)
  countryCode  String   @db.Char(2)
  phonePrefix  String   @db.VarChar(8)
  phoneNumber  String   @db.VarChar(20)
  email        String   @unique @db.VarChar(255)
  passwordHash String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  profile     ChefProfile?    @relation("ChefToProfile")
  dishPhotos  ChefDishPhoto[] @relation("ChefToDishPhotos")
  dishes      Dish[]          @relation("ChefToDishes") // ðŸ‘ˆ

  @@unique([phonePrefix, phoneNumber], name: "unique_phone")
}




// Tabella ChefPro
model ChefProfile {
  id String @id @default(cuid())

  // cheie strÄƒinÄƒ unicÄƒ (1-la-1)
  chefId String @unique
  chef   Chef   @relation("ChefToProfile", fields: [chefId], references: [id], onDelete: Cascade)

  // Foto profilo
  profileImageUrl  String? @db.VarChar(512)
  profileImagePath String? @db.VarChar(512)
  profileImageMime String? @db.VarChar(100)

  // Bio (max 240)
  bio String? @db.VarChar(240)

  // Website
  website String? @db.VarChar(255)

  // Array-uri (PostgreSQL)
  languages String[] // opÈ›ional; salvezi [] din API 
  skills    String[] // max 5 â€” validÄƒm Ã®n API

  // LocaÈ›ie / arie
  address         String? @db.VarChar(255)
  region          String? @db.VarChar(100)
  country         String? @db.Char(2) 
  serviceRadiusKm Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


/**
 * Foto di piatto (una riga = una foto).
 * Collegata allo chef tramite chefId (relazione 1â€“aâ€“N).
 * La descrizione Ã¨ opzionale.
 */
model ChefDishPhoto {
  id String @id @default(cuid())

  
  chefId String
  chef   Chef   @relation("ChefToDishPhotos", fields: [chefId], references: [id], onDelete: Cascade)

  // File immagine
  imageUrl    String  @db.VarChar(512)  // URL pubblico (es. S3/Cloudinary)
  imagePath   String? @db.VarChar(512)  // Percorso interno (facoltativo)
  imageMime   String? @db.VarChar(100)  // MIME (es. "image/jpeg")
  imageWidth  Int?                     // Larghezza in pixel (facoltativo)
  imageHeight Int?                     // Altezza in pixel (facoltativo)

  // Descrizione breve del piatto (opzionale)
  description String? @db.VarChar(240)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Indice per ricerche rapide per chef
  @@index([chefId], map: "idx_dishphoto_chefid")
}

enum DishCategory {
  ANTIPASTO
  PRIMO_PIATTO
  PIATTO_PRINCIPALE
  DESSERT
  ALTRO
}

/// Tabella Piatti (un piatto = una riga)
model Dish {
  id          String       @id @default(cuid())
  chefId      String
  chef        Chef         @relation("ChefToDishes", fields: [chefId], references: [id], onDelete: Cascade)

  nomePiatto  String       @db.VarChar(120)
  categoria   DishCategory // ðŸ‘ˆ enum stabil Ã®n DB
  descrizione String?      @db.VarChar(500)

  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([chefId], map: "idx_dish_chefid")
}

