generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Chef {
  id           String   @id @default(cuid())
  firstName    String   @db.VarChar(60) // Chef's first name
  lastName     String   @db.VarChar(60) // Chef's last name
  countryCode  String   @db.Char(2) // ISO code, e.g. "IT", "BE"
  phonePrefix  String   @db.VarChar(8) // e.g. "+39"
  phoneNumber  String   @db.VarChar(20) // local number without prefix
  email        String   @unique @db.VarChar(255) // unique login email
  passwordHash String // bcrypt hash (never store plain)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  profile ChefProfile? @relation("ChefToProfile")

  @@unique([phonePrefix, phoneNumber], name: "unique_phone")
}

// Tabella ChefPro
model ChefProfile {
  id String @id @default(cuid())

  // cheie străină unică (1-la-1)
  chefId String @unique
  chef   Chef   @relation("ChefToProfile", fields: [chefId], references: [id], onDelete: Cascade)

  // Foto profilo
  profileImageUrl  String? @db.VarChar(512)
  profileImagePath String? @db.VarChar(512)
  profileImageMime String? @db.VarChar(100)

  // Bio (max 240)
  bio String? @db.VarChar(240)

  // Website
  website String? @db.VarChar(255)

  // Array-uri (PostgreSQL)
  languages String[] // opțional; salvezi [] din API 
  skills    String[] // max 5 — validăm în API

  // Locație / arie
  address         String? @db.VarChar(255)
  region          String? @db.VarChar(100)
  country         String? @db.Char(2) 
  serviceRadiusKm Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
