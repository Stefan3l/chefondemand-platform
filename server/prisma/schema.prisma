generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Chef {
  id           String   @id @default(cuid())
  firstName    String   @db.VarChar(60)   // Nome dello chef
  lastName     String   @db.VarChar(60)   // Cognome dello chef
  countryCode  String   @db.Char(2)       // Codice paese ISO2 (es. "IT", "BE")
  phonePrefix  String   @db.VarChar(8)    // Prefisso telefonico (es. "+39")
  phoneNumber  String   @db.VarChar(20)   // Numero locale senza prefisso
  email        String   @unique @db.VarChar(255) // Email di login (univoca)
  passwordHash String                      // Hash bcrypt (mai in chiaro)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relazioni
  profile     ChefProfile?    @relation("ChefToProfile")      // 1–a–1 con ChefProfile
  dishPhotos  ChefDishPhoto[] @relation("ChefToDishPhotos")   // 1–a–N: foto dei piatti dello chef

  // Unicità combinata su prefisso + numero
  @@unique([phonePrefix, phoneNumber], name: "unique_phone")
}


// Tabella ChefPro
model ChefProfile {
  id String @id @default(cuid())

  // cheie străină unică (1-la-1)
  chefId String @unique
  chef   Chef   @relation("ChefToProfile", fields: [chefId], references: [id], onDelete: Cascade)

  // Foto profilo
  profileImageUrl  String? @db.VarChar(512)
  profileImagePath String? @db.VarChar(512)
  profileImageMime String? @db.VarChar(100)

  // Bio (max 240)
  bio String? @db.VarChar(240)

  // Website
  website String? @db.VarChar(255)

  // Array-uri (PostgreSQL)
  languages String[] // opțional; salvezi [] din API 
  skills    String[] // max 5 — validăm în API

  // Locație / arie
  address         String? @db.VarChar(255)
  region          String? @db.VarChar(100)
  country         String? @db.Char(2) 
  serviceRadiusKm Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


/**
 * Foto di piatto (una riga = una foto).
 * Collegata allo chef tramite chefId (relazione 1–a–N).
 * La descrizione è opzionale.
 */
model ChefDishPhoto {
  id String @id @default(cuid())

  
  chefId String
  chef   Chef   @relation("ChefToDishPhotos", fields: [chefId], references: [id], onDelete: Cascade)

  // File immagine
  imageUrl    String  @db.VarChar(512)  // URL pubblico (es. S3/Cloudinary)
  imagePath   String? @db.VarChar(512)  // Percorso interno (facoltativo)
  imageMime   String? @db.VarChar(100)  // MIME (es. "image/jpeg")
  imageWidth  Int?                     // Larghezza in pixel (facoltativo)
  imageHeight Int?                     // Altezza in pixel (facoltativo)

  // Descrizione breve del piatto (opzionale)
  description String? @db.VarChar(240)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Indice per ricerche rapide per chef
  @@index([chefId], map: "idx_dishphoto_chefid")
}