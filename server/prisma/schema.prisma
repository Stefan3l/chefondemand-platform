// â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
// Prisma Schema
// Tutti i commenti sono in italiano.
// â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

// â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
// Enum applicativi
// â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€

// Categoria del piatto
enum DishCategory {
  ANTIPASTO
  PRIMO_PIATTO
  PIATTO_PRINCIPALE
  DESSERT
  ALTRO
}

// Bilancio del menu
enum MenuBalance {
  GUSTOSA
  EQUILIBRATO
  LEGGERA
}

// Tipologia di cucina (massimo 3 valori selezionabili lato API)
enum CuisineType {
  LOCALE
  GIAPPONESE
  MEDITERRANEO
  BBQ
  FRUTTI_DI_MARE_PESCE
  SALUTARE
  FUSION
  SORPRESA
}

// â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
// Modelli dominio
// â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€

model Chef {
  id           String   @id @default(cuid())
  firstName    String   @db.VarChar(60)
  lastName     String   @db.VarChar(60)
  countryCode  String   @db.Char(2)
  phonePrefix  String   @db.VarChar(8)
  phoneNumber  String   @db.VarChar(20)
  email        String   @unique @db.VarChar(255)
  passwordHash String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relazioni 1â€“aâ€“1 e 1â€“aâ€“N
  profile     ChefProfile?    @relation("ChefToProfile")
  dishPhotos  ChefDishPhoto[] @relation("ChefToDishPhotos")
  dishes      Dish[]          @relation("ChefToDishes")
  menus       Menu[]          @relation("ChefToMenus")         // ðŸ‘ˆ menu creati dallo chef
  menuDishes  MenuDish[]      @relation("ChefToMenuDishes")    // ðŸ‘ˆ righe di menu (collegamenti)

  // UnicitÃ  numero di telefono (prefisso + numero)
  @@unique([phonePrefix, phoneNumber], name: "unique_phone")
}

// Profilo chef (1â€“aâ€“1)
model ChefProfile {
  id String @id @default(cuid())

  // Chiave esterna (unica) verso Chef
  chefId String @unique
  chef   Chef   @relation("ChefToProfile", fields: [chefId], references: [id], onDelete: Cascade)

  // Foto profilo
  profileImageUrl  String? @db.VarChar(512)
  profileImagePath String? @db.VarChar(512)
  profileImageMime String? @db.VarChar(100)

  // Bio (max 240)
  bio String? @db.VarChar(240)

  // Website
  website String? @db.VarChar(255)

  // Array (PostgreSQL)
  languages String[] // opzionale; salvare [] lato API se assente
  skills    String[] // max 5 â€” validare lato API

  // Localizzazione / raggio servizio
  address         String? @db.VarChar(255)
  region          String? @db.VarChar(100)
  country         String? @db.Char(2)
  serviceRadiusKm Int?
  serviceMultiDay Boolean @default(false) // ðŸ‘ˆ obbligatorio, mai null

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Foto di piatto (1 riga = 1 foto)
model ChefDishPhoto {
  id String @id @default(cuid())

  chefId String
  chef   Chef   @relation("ChefToDishPhotos", fields: [chefId], references: [id], onDelete: Cascade)

  // File immagine
  imageUrl    String  @db.VarChar(512) // URL pubblico (es. S3/Cloudinary o /static)
  imagePath   String? @db.VarChar(512) // Percorso interno opzionale
  imageMime   String? @db.VarChar(100) // MIME (es. "image/jpeg")
  imageWidth  Int?
  imageHeight Int?

  // Descrizione breve (opzionale)
  description String? @db.VarChar(240)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Indice per ricerche rapide per chef
  @@index([chefId], map: "idx_dishphoto_chefid")
}

// Tabella Piatti (1 riga = 1 piatto creato dallo chef)
model Dish {
  id          String       @id @default(cuid())
  chefId      String
  chef        Chef         @relation("ChefToDishes", fields: [chefId], references: [id], onDelete: Cascade)

  nomePiatto  String       @db.VarChar(120)
  categoria   DishCategory
  descrizione String?      @db.VarChar(500)

  // (Opzionale) collegamenti inversi alle righe di menu che includono questo piatto
  menuDishes  MenuDish[]

  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([chefId], map: "idx_dish_chefid")
}

// â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
// Menu: entitÃ  principale creata dallo chef
// â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€

model Menu {
  id    String @id @default(cuid())

  chefId String
  chef   Chef   @relation("ChefToMenus", fields: [chefId], references: [id], onDelete: Cascade)

  // Dati base del menu
  nome        String   @db.VarChar(120)
  descrizione String?  @db.VarChar(500)

  // Immagine (opzionale)
  imageUrl  String? @db.VarChar(512)
  imagePath String? @db.VarChar(512)

  // Bilancio e Tipi di Cibo (array enum in PostgreSQL)
  balance      MenuBalance
  cuisineTypes CuisineType[] // vincolo "max 3" da applicare lato API/servizio

  // Righe del menu (piatti inclusi)
  menuDishes MenuDish[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([chefId], map: "idx_menu_chefid")
}

// â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
// MenuDish: riga di collegamento tra Menu e Dish con "snapshot"
// â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€

model MenuDish {
  id String @id @default(cuid())

  chefId String
  chef   Chef   @relation("ChefToMenuDishes", fields: [chefId], references: [id], onDelete: Cascade)

  menuId String
  menu   Menu   @relation(fields: [menuId], references: [id], onDelete: Cascade)

  dishId String
  dish   Dish   @relation(fields: [dishId], references: [id], onDelete: Restrict)

  // Snapshot dei dati del piatto al momento dell'inclusione nel menu
  categoria   DishCategory
  nomePiatto  String  @db.VarChar(120)
  descrizione String? @db.VarChar(500)

  // Ordinamento facoltativo all'interno del menu
  ordine Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([chefId], map: "idx_menudish_chefid")
  @@index([menuId], map: "idx_menudish_menuid")
  @@unique([menuId, dishId], map: "uq_menu_dish_once") // evita duplicati dello stesso piatto nel menu
}
